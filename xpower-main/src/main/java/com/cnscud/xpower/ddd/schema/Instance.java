/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnscud.xpower.ddd.schema;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "rawtypes", "unchecked", "incomplete-switch" })
public class Instance implements org.apache.thrift.TBase<Instance, Instance._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Instance");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name",
            org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type",
            org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime",
            org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params",
            org.apache.thrift.protocol.TType.SET, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new InstanceStandardSchemeFactory());
        schemes.put(TupleScheme.class, new InstanceTupleSchemeFactory());
    }

    public String name; // required
    /**
     * 
     * @see Type
     */
    public Type type; // required
    public long updateTime; // required
    public Set<Map<String, String>> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        NAME((short) 1, "name"),
        /**
         * 
         * @see Type
         */
        TYPE((short) 2, "type"), UPDATE_TIME((short) 3, "updateTime"), PARAMS((short) 4, "params");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // NAME
                return NAME;
            case 2: // TYPE
                return TYPE;
            case 3: // UPDATE_TIME
                return UPDATE_TIME;
            case 4: // PARAMS
                return PARAMS;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __UPDATETIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Type.class)));
        tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, new org.apache.thrift.meta_data.MapMetaData(
                        org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Instance.class, metaDataMap);
    }

    public Instance() {
    }

    public Instance(String name, Type type, long updateTime, Set<Map<String, String>> params) {
        this();
        this.name = name;
        this.type = type;
        this.updateTime = updateTime;
        setUpdateTimeIsSet(true);
        this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Instance(Instance other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetType()) {
            this.type = other.type;
        }
        this.updateTime = other.updateTime;
        if (other.isSetParams()) {
            Set<Map<String, String>> __this__params = new HashSet<Map<String, String>>();
            for (Map<String, String> other_element : other.params) {
                Map<String, String> __this__params_copy = new HashMap<String, String>();
                for (Map.Entry<String, String> other_element_element : other_element.entrySet()) {

                    String other_element_element_key = other_element_element.getKey();
                    String other_element_element_value = other_element_element.getValue();

                    String __this__params_copy_copy_key = other_element_element_key;

                    String __this__params_copy_copy_value = other_element_element_value;

                    __this__params_copy.put(__this__params_copy_copy_key, __this__params_copy_copy_value);
                }
                __this__params.add(__this__params_copy);
            }
            this.params = __this__params;
        }
    }

    public Instance deepCopy() {
        return new Instance(this);
    }

    @Override
    public void clear() {
        this.name = null;
        this.type = null;
        setUpdateTimeIsSet(false);
        this.updateTime = 0;
        this.params = null;
    }

    public String getName() {
        return this.name;
    }

    public Instance setName(String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    /**
     * 
     * @see Type
     */
    public Type getType() {
        return this.type;
    }

    /**
     * 
     * @see Type
     */
    public Instance setType(Type type) {
        this.type = type;
        return this;
    }

    public void unsetType() {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
        if (!value) {
            this.type = null;
        }
    }

    public long getUpdateTime() {
        return this.updateTime;
    }

    public Instance setUpdateTime(long updateTime) {
        this.updateTime = updateTime;
        setUpdateTimeIsSet(true);
        return this;
    }

    public void unsetUpdateTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
    }

    /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateTime() {
        return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
    }

    public void setUpdateTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
    }

    public int getParamsSize() {
        return (this.params == null) ? 0 : this.params.size();
    }

    public java.util.Iterator<Map<String, String>> getParamsIterator() {
        return (this.params == null) ? null : this.params.iterator();
    }

    public void addToParams(Map<String, String> elem) {
        if (this.params == null) {
            this.params = new HashSet<Map<String, String>>();
        }
        this.params.add(elem);
    }

    public Set<Map<String, String>> getParams() {
        return this.params;
    }

    public Instance setParams(Set<Map<String, String>> params) {
        this.params = params;
        return this;
    }

    public void unsetParams() {
        this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
        return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
        if (!value) {
            this.params = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case NAME:
            if (value == null) {
                unsetName();
            } else {
                setName((String) value);
            }
            break;

        case TYPE:
            if (value == null) {
                unsetType();
            } else {
                setType((Type) value);
            }
            break;

        case UPDATE_TIME:
            if (value == null) {
                unsetUpdateTime();
            } else {
                setUpdateTime((Long) value);
            }
            break;

        case PARAMS:
            if (value == null) {
                unsetParams();
            } else {
                setParams((Set<Map<String, String>>) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case NAME:
            return getName();

        case TYPE:
            return getType();

        case UPDATE_TIME:
            return Long.valueOf(getUpdateTime());

        case PARAMS:
            return getParams();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case NAME:
            return isSetName();
        case TYPE:
            return isSetType();
        case UPDATE_TIME:
            return isSetUpdateTime();
        case PARAMS:
            return isSetParams();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Instance)
            return this.equals((Instance) that);
        return false;
    }

    public boolean equals(Instance that) {
        if (that == null)
            return false;

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type))
                return false;
            if (!this.type.equals(that.type))
                return false;
        }

        boolean this_present_updateTime = true;
        boolean that_present_updateTime = true;
        if (this_present_updateTime || that_present_updateTime) {
            if (!(this_present_updateTime && that_present_updateTime))
                return false;
            if (this.updateTime != that.updateTime)
                return false;
        }

        boolean this_present_params = true && this.isSetParams();
        boolean that_present_params = true && that.isSetParams();
        if (this_present_params || that_present_params) {
            if (!(this_present_params && that_present_params))
                return false;
            if (!this.params.equals(that.params))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(Instance other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        Instance typedOther = (Instance) other;

        lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUpdateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParams()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Instance(");
        boolean first = true;

        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        } else {
            sb.append(this.type);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("updateTime:");
        sb.append(this.updateTime);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("params:");
        if (this.params == null) {
            sb.append("null");
        } else {
            sb.append(this.params);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class InstanceStandardSchemeFactory implements SchemeFactory {
        public InstanceStandardScheme getScheme() {
            return new InstanceStandardScheme();
        }
    }

    private static class InstanceStandardScheme extends StandardScheme<Instance> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Instance struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // NAME
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.name = iprot.readString();
                        struct.setNameIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // TYPE
                    if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                        struct.type = Type.findByValue(iprot.readI32());
                        struct.setTypeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // UPDATE_TIME
                    if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                        struct.updateTime = iprot.readI64();
                        struct.setUpdateTimeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 4: // PARAMS
                    if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                        {
                            org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                            struct.params = new HashSet<Map<String, String>>(2 * _set0.size);
                            for (int _i1 = 0; _i1 < _set0.size; ++_i1) {
                                Map<String, String> _elem2; // required
                                {
                                    org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                                    _elem2 = new HashMap<String, String>(2 * _map3.size);
                                    for (int _i4 = 0; _i4 < _map3.size; ++_i4) {
                                        String _key5; // required
                                        String _val6; // required
                                        _key5 = iprot.readString();
                                        _val6 = iprot.readString();
                                        _elem2.put(_key5, _val6);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.params.add(_elem2);
                            }
                            iprot.readSetEnd();
                        }
                        struct.setParamsIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Instance struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type.getValue());
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
            oprot.writeI64(struct.updateTime);
            oprot.writeFieldEnd();
            if (struct.params != null) {
                oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                {
                    oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, struct.params.size()));
                    for (Map<String, String> _iter7 : struct.params) {
                        {
                            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                                    org.apache.thrift.protocol.TType.STRING, _iter7.size()));
                            for (Map.Entry<String, String> _iter8 : _iter7.entrySet()) {
                                oprot.writeString(_iter8.getKey());
                                oprot.writeString(_iter8.getValue());
                            }
                            oprot.writeMapEnd();
                        }
                    }
                    oprot.writeSetEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class InstanceTupleSchemeFactory implements SchemeFactory {
        public InstanceTupleScheme getScheme() {
            return new InstanceTupleScheme();
        }
    }

    private static class InstanceTupleScheme extends TupleScheme<Instance> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Instance struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetName()) {
                optionals.set(0);
            }
            if (struct.isSetType()) {
                optionals.set(1);
            }
            if (struct.isSetUpdateTime()) {
                optionals.set(2);
            }
            if (struct.isSetParams()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetType()) {
                oprot.writeI32(struct.type.getValue());
            }
            if (struct.isSetUpdateTime()) {
                oprot.writeI64(struct.updateTime);
            }
            if (struct.isSetParams()) {
                {
                    oprot.writeI32(struct.params.size());
                    for (Map<String, String> _iter9 : struct.params) {
                        {
                            oprot.writeI32(_iter9.size());
                            for (Map.Entry<String, String> _iter10 : _iter9.entrySet()) {
                                oprot.writeString(_iter10.getKey());
                                oprot.writeString(_iter10.getValue());
                            }
                        }
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Instance struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.type = Type.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.updateTime = iprot.readI64();
                struct.setUpdateTimeIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TSet _set11 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                    struct.params = new HashSet<Map<String, String>>(2 * _set11.size);
                    for (int _i12 = 0; _i12 < _set11.size; ++_i12) {
                        Map<String, String> _elem13; // required
                        {
                            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                                    org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                            _elem13 = new HashMap<String, String>(2 * _map14.size);
                            for (int _i15 = 0; _i15 < _map14.size; ++_i15) {
                                String _key16; // required
                                String _val17; // required
                                _key16 = iprot.readString();
                                _val17 = iprot.readString();
                                _elem13.put(_key16, _val17);
                            }
                        }
                        struct.params.add(_elem13);
                    }
                }
                struct.setParamsIsSet(true);
            }
        }
    }

}
