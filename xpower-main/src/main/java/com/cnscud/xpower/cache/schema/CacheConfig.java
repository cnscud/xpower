/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnscud.xpower.cache.schema;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "rawtypes", "unchecked", "incomplete-switch" })
public class CacheConfig implements org.apache.thrift.TBase<CacheConfig, CacheConfig._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CacheConfig");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING,
            (short) 1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type",
            org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params",
            org.apache.thrift.protocol.TType.MAP, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new CacheConfigStandardSchemeFactory());
        schemes.put(TupleScheme.class, new CacheConfigTupleSchemeFactory());
    }

    public String id; // required
    /**
     * 
     * @see CacheType
     */
    public CacheType type; // required
    public Map<String, String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short) 1, "id"),
        /**
         * 
         * @see CacheType
         */
        TYPE((short) 2, "type"), PARAMS((short) 3, "params");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
            case 1: // ID
                return ID;
            case 2: // TYPE
                return TYPE;
            case 3: // PARAMS
                return PARAMS;
            default:
                return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CacheType.class)));
        tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CacheConfig.class, metaDataMap);
    }

    public CacheConfig() {
    }

    public CacheConfig(String id, CacheType type, Map<String, String> params) {
        this();
        this.id = id;
        this.type = type;
        this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CacheConfig(CacheConfig other) {
        if (other.isSetId()) {
            this.id = other.id;
        }
        if (other.isSetType()) {
            this.type = other.type;
        }
        if (other.isSetParams()) {
            Map<String, String> __this__params = new HashMap<String, String>();
            for (Map.Entry<String, String> other_element : other.params.entrySet()) {

                String other_element_key = other_element.getKey();
                String other_element_value = other_element.getValue();

                String __this__params_copy_key = other_element_key;

                String __this__params_copy_value = other_element_value;

                __this__params.put(__this__params_copy_key, __this__params_copy_value);
            }
            this.params = __this__params;
        }
    }

    public CacheConfig deepCopy() {
        return new CacheConfig(this);
    }

    @Override
    public void clear() {
        this.id = null;
        this.type = null;
        this.params = null;
    }

    public String getId() {
        return this.id;
    }

    public CacheConfig setId(String id) {
        this.id = id;
        return this;
    }

    public void unsetId() {
        this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return this.id != null;
    }

    public void setIdIsSet(boolean value) {
        if (!value) {
            this.id = null;
        }
    }

    /**
     * 
     * @see CacheType
     */
    public CacheType getType() {
        return this.type;
    }

    /**
     * 
     * @see CacheType
     */
    public CacheConfig setType(CacheType type) {
        this.type = type;
        return this;
    }

    public void unsetType() {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
        if (!value) {
            this.type = null;
        }
    }

    public int getParamsSize() {
        return (this.params == null) ? 0 : this.params.size();
    }

    public void putToParams(String key, String val) {
        if (this.params == null) {
            this.params = new HashMap<String, String>();
        }
        this.params.put(key, val);
    }

    public Map<String, String> getParams() {
        return this.params;
    }

    public CacheConfig setParams(Map<String, String> params) {
        this.params = params;
        return this;
    }

    public void unsetParams() {
        this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
        return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
        if (!value) {
            this.params = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
        case ID:
            if (value == null) {
                unsetId();
            } else {
                setId((String) value);
            }
            break;

        case TYPE:
            if (value == null) {
                unsetType();
            } else {
                setType((CacheType) value);
            }
            break;

        case PARAMS:
            if (value == null) {
                unsetParams();
            } else {
                setParams((Map<String, String>) value);
            }
            break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
        case ID:
            return getId();

        case TYPE:
            return getType();

        case PARAMS:
            return getParams();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
        case ID:
            return isSetId();
        case TYPE:
            return isSetType();
        case PARAMS:
            return isSetParams();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof CacheConfig)
            return this.equals((CacheConfig) that);
        return false;
    }

    public boolean equals(CacheConfig that) {
        if (that == null)
            return false;

        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (!this.id.equals(that.id))
                return false;
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type))
                return false;
            if (!this.type.equals(that.type))
                return false;
        }

        boolean this_present_params = true && this.isSetParams();
        boolean that_present_params = true && that.isSetParams();
        if (this_present_params || that_present_params) {
            if (!(this_present_params && that_present_params))
                return false;
            if (!this.params.equals(that.params))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(CacheConfig other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        CacheConfig typedOther = (CacheConfig) other;

        lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParams()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CacheConfig(");
        boolean first = true;

        sb.append("id:");
        if (this.id == null) {
            sb.append("null");
        } else {
            sb.append(this.id);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        } else {
            sb.append(this.type);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("params:");
        if (this.params == null) {
            sb.append("null");
        } else {
            sb.append(this.params);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CacheConfigStandardSchemeFactory implements SchemeFactory {
        public CacheConfigStandardScheme getScheme() {
            return new CacheConfigStandardScheme();
        }
    }

    private static class CacheConfigStandardScheme extends StandardScheme<CacheConfig> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, CacheConfig struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                case 1: // ID
                    if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                        struct.id = iprot.readString();
                        struct.setIdIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 2: // TYPE
                    if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                        struct.type = CacheType.findByValue(iprot.readI32());
                        struct.setTypeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                case 3: // PARAMS
                    if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                        {
                            org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                            struct.params = new HashMap<String, String>(2 * _map0.size);
                            for (int _i1 = 0; _i1 < _map0.size; ++_i1) {
                                String _key2; // required
                                String _val3; // required
                                _key2 = iprot.readString();
                                _val3 = iprot.readString();
                                struct.params.put(_key2, _val3);
                            }
                            iprot.readMapEnd();
                        }
                        struct.setParamsIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, CacheConfig struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.id != null) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeString(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.params != null) {
                oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING,
                            struct.params.size()));
                    for (Map.Entry<String, String> _iter4 : struct.params.entrySet()) {
                        oprot.writeString(_iter4.getKey());
                        oprot.writeString(_iter4.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CacheConfigTupleSchemeFactory implements SchemeFactory {
        public CacheConfigTupleScheme getScheme() {
            return new CacheConfigTupleScheme();
        }
    }

    private static class CacheConfigTupleScheme extends TupleScheme<CacheConfig> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, CacheConfig struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetType()) {
                optionals.set(1);
            }
            if (struct.isSetParams()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetId()) {
                oprot.writeString(struct.id);
            }
            if (struct.isSetType()) {
                oprot.writeI32(struct.type.getValue());
            }
            if (struct.isSetParams()) {
                {
                    oprot.writeI32(struct.params.size());
                    for (Map.Entry<String, String> _iter5 : struct.params.entrySet()) {
                        oprot.writeString(_iter5.getKey());
                        oprot.writeString(_iter5.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, CacheConfig struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.type = CacheType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
                            org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.params = new HashMap<String, String>(2 * _map6.size);
                    for (int _i7 = 0; _i7 < _map6.size; ++_i7) {
                        String _key8; // required
                        String _val9; // required
                        _key8 = iprot.readString();
                        _val9 = iprot.readString();
                        struct.params.put(_key8, _val9);
                    }
                }
                struct.setParamsIsSet(true);
            }
        }
    }

}
